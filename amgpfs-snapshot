#!/usr/bin/perl
# Copyright (c) 2015, Michael Robbert.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# Author: Michael Robbert <mrobbert@gmail.com>

# PROPERTY:
#
#    SNAPSHOT-SIZE
#
#    LVCREATE-PATH
#    LVDISPLAY-PATH
#    LVREMOVE-PATH
#    VGDISPLAY-PATH
#
#    SUDO
#
use lib '/usr/lib/amanda/perl/';
use strict;
use Getopt::Long;

package Amanda::Script::Amgpfs_snapshot;
use base qw(Amanda::Script);

use Amanda::Config qw( :getconf :init );
use Amanda::Debug qw( :logging );
use Amanda::Util qw( :constants );
use Amanda::Paths;
use Amanda::Constants;

use Config;
use IPC::Open3;
use Symbol;

sub new {
    my $class = shift;
    my ($execute_where, $config, $host, $disk, $device, $level, $index,
        $message, $collection, $record, $mmcrsnapshot,
        $mmdelsnapshot, $fileset, $sudo, $sleep) = @_;
    my $self = $class->SUPER::new($execute_where, $config);

    $self->{execute_where}  = $execute_where;
    $self->{config}         = $config;
    $self->{host}           = $host;
    $self->{device}         = $device;
    $self->{disk}           = $disk;
    $self->{level}          = [ @{$level} ]; # Copy the array
    $self->{index}          = $index;
    $self->{message}        = $message;
    $self->{collection}     = $collection;
    $self->{record}         = $record;

    $self->{mmcrsnapshot}   = $mmcrsnapshot;
    $self->{mmdelsnapshot}  = $mmdelsnapshot;
    $self->{fileset}        = $fileset;

    $self->{sudo}           = $sudo;

    $self->{sleep}          = $sleep;

    $self->{gpfsdev}        = undef;
    $self->{fs_type}        = undef;
    $self->{snap_name}      = "amsnap";

    return $self;
}

sub create_snapshot {
    my $self = shift;

    my @args = ("$self->{gpfsdev}", "$self->{disk}");
    if ($self->{fileset} ne "") {
        push(@args, ("-j",$self->{fileset}));
    }
    # create a new snapshot with mmcrsnapshot
    $self->execute(1,
        "$self->{mmcrsnapshot}", @args
    );

    debug("Created snapshot of `$self->{mountpoint}' at `$self->{disk}'.");
}

# Executes (safely) the given command and arguments. Optional execution
# through sudo can be specified, but will only occur if the script was invoked
# with the '--sudo' argument.
sub execute {
    my $self = shift;
    my $sudo = shift;
    my $cmd = shift;

    # escape all given arguments
    my @args = map(quotemeta, @_);

    my ($in, $out, $err, $pid);
    $err = Symbol::gensym;

    my $full_cmd = ($sudo and $self->{sudo}) ? "sudo $cmd" : $cmd;

    $full_cmd .= " @args";

    debug("Executing: $full_cmd");
    $pid = open3($in, $out, $err, $full_cmd);

    close($in);

    my @output = <$out>;
    my @errors = <$err>;

    close($out);
    close($err);

    waitpid($pid, 0);

    # NOTE There's an exception for readlink, as it's failure isn't critical.
    if ($? > 0 and $cmd ne "readlink") {
        my $err_str = join("", @errors);
        chomp($err_str);

        $self->print_to_server_and_die("",
            "Failed to execute (status $?) `$full_cmd': $err_str",
            $Amanda::Script_App::ERROR
        );
    }

    return @output;
}

# Readlink wrapper.
sub readlink {
    my $self = shift;
    my $path = shift;

    # NOTE: We don't use perl's readlink here, because it might need to be
    # executed with elevated privileges (sudo).
    my $real_path = join("", $self->execute(1, "readlink", $path));
    chomp($real_path);
    $real_path =~ s@\.\.@/dev@;

    return ($real_path ne "") ? $real_path : $path;
}

# Removes the snapshot.
sub remove_snapshot {
    my $self = shift;

    if (defined $self->{sleep}) {
      sleep($self->{sleep});
    }

    my @args = ($self->{gpfsdev}, $self->{disk});
    if ($self->{fileset} ne "") {
        push(@args, ("-j", $self->{fileset}));
    }

    # remove snapshot with 'mmdelsnapshot'
    $self->execute(1, "$self->{mmdelsnapshot} ", @args);

    debug("Removed snapshot of `$self->{mountpoint}'.");
}

# Resolves the underlying device on which the configured directory resides.
sub resolve_device {
    my $self = shift;

    # Run df to get the mount point. Get the device path.
    my @ret = $self->execute(0, "$self->{df}", "$self->{device}");
    if ($ret[1] =~ /^(\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)/) {
        $self->{gpfsdev} = $1;
        $self->{mountpoint} = $2;
    } else {
        debug("df returned: $ret[1]");
    }

    # The gpfsdir is the device string with the mountpoint removed
    $self->{gpfsdir} = $self->{device};
    $self->{gpfsdir} =~ s/$self->{mountpoint}//;

    # Scan mtab to get the FS type.
    my $fs_type = $self->scan_mtab(
        sub { return $_[2] if ($_[0] eq $self->{gpfsdev}); }
    );
    $self->{fs_type} = $fs_type;

    debug(
        "Resolved device $self->{gpfsdev} and mount point $self->{mountpoint} from disk $self->{device}."
    );
}

# Iterates over lines in the system mtab and invokes the given anonymous
# subroutine with entries from each record:
#  1. Canonical device path (as resolved from readlink).
#  2. Mount point directory.
#  3. Filesystem type.
sub scan_mtab {
    my $self = shift;
    my $sub = shift;

    open(MTAB, "/etc/mtab");
    my $line;
    my $result;
    while ($line = <MTAB>) {
        chomp($line);
        my ($device, $directory, $type) = split(/\s+/, $line);
        $result = $sub->($device, $directory, $type);
        last if ($result);
    }
    close MTAB;

    return $result;
}

sub setup {
    my $self = shift;

    # can only be executed in client context
    if ($self->{execute_where} ne "client") {
        $self->print_to_server_and_die("",
            "Script must be run on the client",
            $Amanda::Script_App::ERROR
        );
    }

    # resolve paths, if not already provided.
    if (!defined $self->{mmcrsnapshot}) {
        chomp($self->{mmcrsnapshot} = `which mmcrsnapshot`);
        $self->print_to_server_and_die("",
            "mmcrsnapshot wasn't found.",
            $Amanda::Script_App::ERROR
        ) if $?;
    }

    if (!defined $self->{mmdelsnapshot}) {
        chomp($self->{mmdelsnapshot} = `which mmdelsnapshot`);
        $self->print_to_server_and_die("",
            "mmdelsnapshot wasn't found.",
            $Amanda::Script_App::ERROR
        ) if $?;
    }

    if (!defined $self->{df}) {
        chomp($self->{df} = `which df`);
        $self->print_to_server_and_die("",
            "df wasn't found.",
            $Amanda::Script_App::ERROR
        ) if $?;
    }

    # resolve actual gpfs device
    $self->resolve_device();

    if (!defined $self->{device}) {
        $self->print_to_server_and_die("",
            "Can't resolve device name for $self->{device}.",
            $Amanda::Script_App::ERROR
        ) if $?;
    }

    if ($self->{fs_type} ne "gpfs") {
        $self->print_to_server_and_die("",
            "$self->{device} does not appear to be a GPFS file system.",
            $Amanda::Script_App::ERROR
        );
    }

}

sub command_support {
    my $self = shift;

    print "CONFIG YES\n";
    print "HOST YES\n";
    print "DISK YES\n";
    print "MESSAGE-LINE YES\n";
    print "MESSAGE-XML NO\n";
    print "EXECUTE-WHERE YES\n";
}

#define a execute_on_* function for every execute_on you want the script to do
#something
sub command_pre_dle_backup {
    my $self = shift;

    $self->setup();
    $self->create_snapshot();

    print "PROPERTY device $self->{mountpoint}\n";
    print "PROPERTY directory $self->{mountpoint}/.snapshots/$self->{disk}$self->{gpfsdir}\n";
}

sub command_post_dle_backup {
    my $self = shift;

    $self->setup();
    $self->remove_snapshot();
}

sub command_pre_dle_amcheck {
    my $self = shift;

    $self->setup();
    $self->create_snapshot();

    print "PROPERTY device $self->{mountpoint}\n";
    print "PROPERTY directory $self->{mountpoint}/.snapshots/$self->{disk}$self->{gpfsdir}\n";
}

sub command_post_dle_amcheck {
    my $self = shift;

    $self->setup();
    $self->remove_snapshot();
}

package main;

sub usage {
    print <<EOF;
Usage: amgpfs-snapshot <command> --execute-where=client --config=<config> --host=<host> --disk=<disk> --device=<device> --level=<level> --index=<yes|no> --message=<text> --collection=<no> --record=<yes|no> --mmcrsnapshot-path=<path> --mmdelsnapshot-path=<path> --fileset=<name> --sudo=<0|1>.
EOF
    exit(1);
}

my $opt_execute_where;
my $opt_config;
my $opt_host;
my $opt_disk;
my $opt_device;
my @opt_level;
my $opt_index;
my $opt_message;
my $opt_collection;
my $opt_record;

my $opt_mmcrsnapshot;
my $opt_mmdelsnapshot;
my $opt_fileset;
my $opt_sudo;
my $opt_sleep;

Getopt::Long::Configure(qw{bundling});
GetOptions(
    'execute-where=s'      => \$opt_execute_where,
    'config=s'             => \$opt_config,
    'host=s'               => \$opt_host,
    'disk=s'               => \$opt_disk,
    'device=s'             => \$opt_device,
    'level=s'              => \@opt_level,
    'index=s'              => \$opt_index,
    'message=s'            => \$opt_message,
    'collection=s'         => \$opt_collection,
    'record=s'             => \$opt_record,
    'mmcrsnapshot-path=s'  => \$opt_mmcrsnapshot,
    'mmdelsnapshot-path=s' => \$opt_mmdelsnapshot,
    'fileset=s'            => \$opt_fileset,
    'sudo=s'               => \$opt_sudo,
    'sleep=i'              => \$opt_sleep,
) or usage();

# add SBIN to PATH
$ENV{'PATH'} = "/usr/lpp/mmfs/bin:/sbin:/usr/sbin:$ENV{'PATH'}:/usr/local/sbin";

my $script = Amanda::Script::Amgpfs_snapshot->new($opt_execute_where,
    $opt_config, $opt_host, $opt_disk, $opt_device, \@opt_level, $opt_index,
    $opt_message, $opt_collection, $opt_record, $opt_mmcrsnapshot,
    $opt_mmdelsnapshot, $opt_fileset, $opt_sudo, $opt_sleep);
$script->do($ARGV[0]);

# vim: set et sts=4 sw=4 :
